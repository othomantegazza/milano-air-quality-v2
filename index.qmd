---
title: "Milano Air Quality Dashboard"
format:
  html: 
    theme: default
    css: style/style.css
    page-layout: custom 
    margin-left: 10px
    margin-top: 10px 
    margin-right: 30px
    margin-bottom: 10px
editor_options: 
  chunk_output_type: console
---

```{r notes}
#| include: false
# https://www.eea.europa.eu/themes/air/air-quality-concentrations/AirQlimitvalues.png
# https://environment.ec.europa.eu/topics/air/air-quality/eu-air-quality-standards_en
# https://dati.comune.milano.it/dataset/ds573-valori-rilevati-per-i-principali-inquinanti-dell-aria
```

<!--- js dependencies -->
<script src="js/time-series-dot.js"></script>
<script src="js/heatmap.js"></script>
<script src="https://d3js.org/d3.v7.min.js"></script> 
<script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>

```{r rpackages}
#| include: false
library(tidyverse)
library(here)
library(tsibble)
library(lubridate)
library(janitor)
library(broom)
```

```{r utils}
source(
  here(
    'R/utils.R'
  )
)
```

```{r params}
loess_span <- .2
```

```{r pollutants}
#| include: false

# from https://environment.ec.europa.eu/topics/air/air-quality/eu-air-quality-standards_en
pollutants <- 
  tribble(~inquinante, ~pollutant_name, ~eu_limits,
          'C6H6', 'Polycyclic Aromatic Hydrocarbons', 1e-3,
          'CO', 'Carbon Monoxide', 1e4,
          'NO2', 'Nitrogen Dioxide', 40,
          'O3', 'Ozone', 120,
          'PM10', 'Particulate Matter', 40,
          'PM25', 'Fine Particles', 20,
          'SO2', 'Sulphur Dioxide', 125,
          )
```

```{r get-clean-data}
#| include: false
air_q_url <-
  'data/aq.csv'

# read the data and do main cleaning
air_q <- 
  air_q_url %>% 
  readr::read_delim(delim = ',') %>% 
  janitor::clean_names() %>% 
  rename(date = data) %>% 
  mutate(date = date %>% as_date()) %>% 
  select(-id) %>% 
  mutate(
    across(
      .cols = inquinante,
      .fns = ~case_when(
        . == 'CO_8h' ~ 'CO',
        TRUE ~ .)
    ),
    # guessing real order of magnitude of measurements
    across(
      .cols = valore,
      .fns = ~case_when(
        inquinante == 'C6H6' ~ . * 1e-3,
        inquinante == 'CO' ~ . * 1e3,
        TRUE ~ .)
    )
  ) %>% 
  drop_na() %>% 
  left_join(pollutants)

# Nest by pollutant
air_q_nested <- 
  air_q %>% 
  select(-pollutant_name) %>% 
  group_by(inquinante, eu_limits) %>% 
  nest(); air_q_nested$scaled <- 
  air_q_nested %>% 
  pmap(scale_pollutant); air_q_nested$smoothed <-
  air_q_nested %>% 
  pmap(smooth_air_q)

# scaled data for the heatmap
air_q_scaled <- 
  air_q_nested %>% 
  unnest(scaled) %>% 
  select(-data)

# check how much the values go out of limits
# you'll use this number to compute a relative 
# colour scale across graphics
max_over_limits <- air_q_scaled$scaled %>% max(na.rm = T)

# named list for all other plot
air_q_list <-
  air_q_nested %>% 
  ungroup() %>% 
  select(-scaled) %>% 
  mutate(
    across(
      .cols = c(data, smoothed),
      .fns = ~map(., transpose)
    )
  ) %>% 
  {
    transpose(.l = .,
              .names = .$inquinante)
  }

ojs_define(
  all_scaled_in = air_q_scaled %>% select(-smoothed),
  air_q_list = air_q_list,
  max_over_limits = max_over_limits
  )
```

```{js params-js}
//| echo: false
var height = 350
```

```{ojs palette}
tokyo = FileAttachment('data/tokyo-palette.json').json()
tokyo_rev = tokyo.slice().reverse()  
```


```{ojs}
//| output: false
all_scaled_in.date = all_scaled_in.date.map(x => Date.parse(x))
```

```{ojs data}
//| echo: false
allScaled = transpose(all_scaled_in)
```

```{ojs dates}
getDates = d => d.date

allDates = d3.map(allScaled, getDates)
```

```{ojs inputs-start}
viewof start = Inputs.date({label: "Start date",
                            value: d3.min(allDates),
                            min: d3.min(allDates),
                            max: d3.max(allDates)})
```

```{ojs inputs-end}
viewof end = Inputs.date({label: "End date",
                            value: d3.max(allDates),
                            min: start,
                            max: d3.max(allDates)})   
```

```{ojs filter-data}
allScaledFiltered = allScaled.filter((i) => {
    return (i.date >= start & i.date <= end) 
})
```

:::::: {.grid}

::::: {.g-col-12 .g-col-xl-8}

::: {.g-col-12}

```{ojs heatmap}
//| echo: false
heatmap(allScaledFiltered, {
  xName: 'date',
  yName: 'inquinante',
  fillName: 'scaled',
  xType: d3.scaleTime,
  fillPalette: tokyo_rev,
  fillDomain: [0, 1, max_over_limits],
  fillRange: [0, 0.5, 1],
  xLabel: "Days â†’",
  width,
  targetLimit: 1,
  height: height,
  columnsRatio: 8/12,
})
```

:::

:::: {.g-col-12}

```{ojs scatter-params}
scatter_params = {
  let scatter_params = {
    x: d => d.date*24*60*60*1000,
    y: d => d.valore,
    fill: d => d.valore,
    xSmooth: d => d.date*24*60*60*1000,
    yLow95: d => d.low_95,
    yHigh95: d => d.high_95,
    start: start,
    end: end,
    fillRange: [0, 0.5, 1], 
    fillDomain: [0, 1, max_over_limits],
    fillPalette: tokyo_rev,
    width: width,
    height: height,
    columnsRatio: 8/12,
  }
  return scatter_params
}
```


::: {.panel-tabset}

### Cyclic aromatics

```{ojs c6h6}
//| echo: false
Scatterplot(air_q_list.C6H6, scatter_params)    
```

### Carbon Monoxide

```{ojs co}
//| echo: false
Scatterplot(air_q_list.CO, scatter_params)    
```


### Nitrogen Dioxide

```{ojs no2}
//| echo: false
Scatterplot(air_q_list.NO2, scatter_params)    
```

### Ozone

```{ojs ozone}
//| echo: false
Scatterplot(air_q_list.O3, scatter_params)
```

### PM10

```{ojs pm10}
//| echo: false
Scatterplot(air_q_list.PM10, scatter_params)    
```


### PM2.5

```{ojs pm25}
//| echo: false
Scatterplot(air_q_list.PM25, scatter_params)    
```


### Sulphur Dioxide

```{ojs so2}
//| echo: false
Scatterplot(air_q_list.SO2, scatter_params)    
```


:::

::::

:::::

::::: {.g-col-12 .g-col-xl-4}

:::::

::::::